plugins {
    id 'java'
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.shadow)
    alias(libs.plugins.kotlin.kapt)
}

group = 'com.tk.learn'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

kotlin {
    jvmToolchain(21)
}



dependencies {
    implementation(libs.javalin)

    // Kotlin stdlib
    implementation(libs.kotlin.stdlib)

    // Exposed jdbc
    implementation(libs.exposed.core)
    implementation(libs.exposed.jdbc)

    // H2 Database
    runtimeOnly(libs.h2)

    //logging
    implementation(libs.slf4j.simple)


    // Config from hoplite
    implementation(libs.hoplite.core)
    implementation(libs.hoplite.yaml)

    // Validator
    implementation(libs.valiktor.core)

    // OpenApi3
    kapt(libs.openapi.processor)

    implementation(libs.javalin.openapi.plugin) // for /openapi route with JSON scheme
    implementation(libs.javalin.swagger.plugin) // for Swagger UI
    implementation(libs.javalin.redoc.plugin)

    // Micrometer and prometheus
    implementation(libs.javalin.micrometer)
    implementation(libs.micrometer.prometheus)

    // JSON
    implementation(libs.jackson.databind)
    implementation(libs.jackson.module.kotlin)

    // Test
    testImplementation(platform(libs.junit.bom))
    testImplementation(libs.junit.jupiter)
    testImplementation(libs.mockk)
    testRuntimeOnly(libs.junit.platform.launcher)
}

test {
    useJUnitPlatform()
}

// Configure ShadowJar to build a fat jar including all dependencies
shadowJar {
    archiveClassifier.set('all')
    mergeServiceFiles()
    manifest {
        attributes(
                'Main-Class': 'com.tk.learn.MainKt'
        )
    }
}

// Optionally, make the standard build also assemble the shadow jar
build.dependsOn shadowJar